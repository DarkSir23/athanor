# Generated by Django 2.2.6 on 2019-11-23 03:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('typeclasses', '0013_auto_20191015_1922'),
    ]

    operations = [
        migrations.CreateModel(
            name='TraitCollectionDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_entity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='trait_collections', to='core.EntityMapDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'TraitCollection',
                'verbose_name_plural': 'TraitCollections',
                'unique_together': {('db_entity', 'db_key')},
            },
        ),
        migrations.CreateModel(
            name='TraitDefinitionDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_formal_name', models.CharField(max_length=255)),
                ('db_formal_name_plural', models.CharField(max_length=255, null=True)),
                ('db_global_identifier', models.CharField(max_length=255, null=True, unique=True)),
                ('db_default_value', models.BigIntegerField(default=0)),
                ('db_is_category', models.BooleanField(default=False)),
                ('db_allow_context', models.BooleanField(default=False)),
                ('db_require_context', models.BooleanField(default=False)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_child_default_typeclass', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.TypeclassMap')),
                ('db_parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='traits.TraitDefinitionDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
                ('db_value_default_typeclass', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.TypeclassMap')),
            ],
            options={
                'verbose_name': 'TraitDefinition',
                'verbose_name_plural': 'TraitDefinitions',
                'unique_together': {('db_parent', 'db_key'), ('db_parent', 'db_formal_name')},
            },
        ),
        migrations.CreateModel(
            name='TraitDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_context', models.CharField(blank=True, default='', max_length=255)),
                ('db_base_value', models.BigIntegerField(default=0)),
                ('db_damage_value', models.BigIntegerField(default=0)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_collection', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='traits', to='traits.TraitCollectionDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
                ('db_trait', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='traits', to='traits.TraitDefinitionDB')),
            ],
            options={
                'verbose_name': 'Trait',
                'verbose_name_plural': 'Traits',
                'unique_together': {('db_collection', 'db_trait', 'db_key', 'db_context')},
            },
        ),
    ]
