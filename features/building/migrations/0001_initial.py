# Generated by Django 2.2.6 on 2019-11-23 03:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('characters', '0012_merge_20191110_2125'),
        ('typeclasses', '0013_auto_20191015_1922'),
    ]

    operations = [
        migrations.CreateModel(
            name='AreaDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
            ],
            options={
                'verbose_name': 'Area',
                'verbose_name_plural': 'Areas',
            },
        ),
        migrations.CreateModel(
            name='MapDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_key', models.CharField(max_length=255)),
                ('db_description', models.TextField(null=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'Evennia Database Object',
                'ordering': ['-db_date_created', 'id', 'db_typeclass_path', 'db_key'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MapPointDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_x_coordinate', models.IntegerField(db_index=True)),
                ('db_y_coordinate', models.IntegerField(db_index=True)),
                ('db_z_coordinate', models.IntegerField(db_index=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='building.MapDB')),
                ('db_room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='map_point', to='characters.ObjectDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='GatewayDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='gateways', to='building.AreaDB')),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'Gateway',
                'verbose_name_plural': 'Gateways',
            },
        ),
        migrations.CreateModel(
            name='CoordinateDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_x', models.FloatField(default=0.0)),
                ('db_y', models.FloatField(default=0.0)),
                ('db_z', models.FloatField(default=0.0)),
                ('db_x_velocity', models.FloatField(default=0.0)),
                ('db_y_velocity', models.FloatField(default=0.0)),
                ('db_z_velocity', models.FloatField(default=0.0)),
                ('db_pitch', models.FloatField(default=0.0)),
                ('db_yaw', models.FloatField(default=0.0)),
                ('db_roll', models.FloatField(default=0.0)),
                ('db_pitch_transform', models.FloatField(default=0.0)),
                ('db_yaw_transform', models.FloatField(default=0.0)),
                ('db_roll_transform', models.FloatField(default=0.0)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_entity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coordinates', to='characters.ObjectDB')),
                ('db_sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_coordinates', to='characters.ObjectDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias characters.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'SectorLocation',
                'verbose_name_plural': 'SectorLocations',
            },
        ),
    ]
