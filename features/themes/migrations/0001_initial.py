# Generated by Django 2.2.6 on 2019-11-23 03:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('actors', '0012_merge_20191110_2125'),
        ('typeclasses', '0013_auto_20191015_1922'),
    ]

    operations = [
        migrations.CreateModel(
            name='ThemeDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_description', models.TextField()),
                ('db_participant_typeclass', models.CharField(max_length=255, null=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'Theme',
                'verbose_name_plural': 'Themes',
            },
        ),
        migrations.CreateModel(
            name='ThemeParticipantDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_list_type', models.CharField(max_length=50)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_character', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='themes', to='actors.ObjectDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
                ('db_theme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='themes.ThemeDB')),
            ],
            options={
                'verbose_name': 'ThemeParticipant',
                'verbose_name_plural': 'ThemeParticipants',
                'unique_together': {('db_theme', 'db_character')},
            },
        ),
    ]
