# Generated by Django 2.2.6 on 2019-11-23 03:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('actors', '0012_merge_20191110_2125'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('typeclasses', '0013_auto_20191015_1922'),
    ]

    operations = [
        migrations.CreateModel(
            name='ForumBoardDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_order', models.PositiveIntegerField(default=0)),
                ('db_mandatory', models.BooleanField(default=False)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
            ],
            options={
                'verbose_name': 'Forum',
                'verbose_name_plural': 'Forums',
            },
        ),
        migrations.CreateModel(
            name='ForumThreadDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_date_modified', models.DateTimeField(auto_now_add=True)),
                ('db_order', models.PositiveIntegerField(null=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threads', to='forum.ForumBoardDB')),
                ('db_entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='forum_threads', to='core.EntityMapDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'Thread',
                'verbose_name_plural': 'Threads',
                'unique_together': {('db_board', 'db_order')},
            },
        ),
        migrations.CreateModel(
            name='ForumCategoryDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_abbr', models.CharField(blank=True, max_length=5, unique=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'ForumCategory',
                'verbose_name_plural': 'ForumCategories',
            },
        ),
        migrations.AddField(
            model_name='forumboarddb',
            name='db_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum', to='forum.ForumCategoryDB'),
        ),
        migrations.AddField(
            model_name='forumboarddb',
            name='db_ignore_list',
            field=models.ManyToManyField(to='actors.ObjectDB'),
        ),
        migrations.AddField(
            model_name='forumboarddb',
            name='db_tags',
            field=models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag'),
        ),
        migrations.CreateModel(
            name='ForumThreadRead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_read', models.DateTimeField(null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_read', to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read', to='forum.ForumThreadDB')),
            ],
            options={
                'unique_together': {('account', 'thread')},
            },
        ),
        migrations.CreateModel(
            name='ForumPostDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_date_modified', models.DateTimeField(auto_now_add=True)),
                ('db_order', models.PositiveIntegerField(null=True)),
                ('db_body', models.TextField(blank=True, null=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_entity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='forum_posts', to='core.EntityMapDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
                ('db_thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='forum.ForumThreadDB')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'unique_together': {('db_thread', 'db_order')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='forumboarddb',
            unique_together={('db_category', 'db_key'), ('db_category', 'db_order')},
        ),
    ]
