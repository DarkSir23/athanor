# Generated by Django 2.2.6 on 2019-11-23 03:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('typeclasses', '0013_auto_20191015_1922'),
        ('forum', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_pitch', models.TextField(blank=True, default=None, null=True)),
                ('db_outcome', models.TextField(blank=True, default=None, null=True)),
                ('db_location', models.TextField(blank=True, default=None, null=True)),
                ('db_date_scheduled', models.DateTimeField(null=True)),
                ('db_date_started', models.DateTimeField(null=True)),
                ('db_date_finished', models.DateTimeField(null=True)),
                ('db_public', models.BooleanField(default=True)),
                ('db_status', models.PositiveSmallIntegerField(db_index=True, default=0)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
                ('db_thread', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event', to='forum.ForumThreadDB')),
            ],
            options={
                'verbose_name': 'Evennia Database Object',
                'ordering': ['-db_date_created', 'id', 'db_typeclass_path', 'db_key'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlotDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_pitch', models.TextField(blank=True, null=True)),
                ('db_summary', models.TextField(blank=True, null=True)),
                ('db_outcome', models.TextField(blank=True, null=True)),
                ('db_date_start', models.DateTimeField(null=True)),
                ('db_date_end', models.DateTimeField(null=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'Plot',
                'verbose_name_plural': ' Plots',
            },
        ),
        migrations.CreateModel(
            name='EventSourceDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_source_type', models.PositiveIntegerField(default=0)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_sources', to='rplogger.EventDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'EventSource',
                'verbose_name_plural': 'EventSources',
                'unique_together': {('db_event', 'db_source_type', 'db_key')},
            },
        ),
        migrations.CreateModel(
            name='EventParticipantDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_participant_type', models.PositiveSmallIntegerField(default=0)),
                ('db_action_count', models.PositiveIntegerField(default=0)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_entity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='logs', to='core.EntityMapDB')),
                ('db_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='rplogger.EventDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'EventParticipant',
                'verbose_name_plural': 'EventParticipants',
                'unique_together': {('db_entity', 'db_event')},
            },
        ),
        migrations.AddField(
            model_name='eventdb',
            name='plots',
            field=models.ManyToManyField(related_name='scenes', to='rplogger.PlotDB'),
        ),
        migrations.CreateModel(
            name='EventCodenameDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_participant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='codenames', to='rplogger.EventParticipantDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'EventCodeName',
                'verbose_name_plural': 'EventCodeNames',
                'unique_together': {('db_participant', 'db_key')},
            },
        ),
        migrations.CreateModel(
            name='EventActionDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_ignore', models.BooleanField(db_index=True, default=False)),
                ('db_sort_order', models.PositiveIntegerField(default=0)),
                ('db_text', models.TextField(blank=True)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_codename', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='actions', to='rplogger.EventCodenameDB')),
                ('db_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='rplogger.EventDB')),
                ('db_participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='rplogger.EventParticipantDB')),
                ('db_source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='actions', to='rplogger.EventSourceDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'EventAction',
                'verbose_name_plural': 'EventActions',
            },
        ),
        migrations.CreateModel(
            name='PlotRunnerDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_key', models.CharField(db_index=True, max_length=255, verbose_name='key')),
                ('db_typeclass_path', models.CharField(db_index=True, help_text="this defines what 'type' of entity this is. This variable holds a Python path to a module with a valid Evennia Typeclass.", max_length=255, null=True, verbose_name='typeclass')),
                ('db_date_created', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('db_lock_storage', models.TextField(blank=True, help_text="locks limit access to an entity. A lock is defined as a 'lock string' on the form 'type:lockfunctions', defining what functionality is locked and how to determine access. Not defining a lock means no access is granted.", verbose_name='locks')),
                ('db_runner_type', models.PositiveSmallIntegerField(default=0)),
                ('db_attributes', models.ManyToManyField(help_text='attributes on this object. An attribute can hold any pickle-able python object (see docs for special cases).', to='typeclasses.Attribute')),
                ('db_entity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plots', to='core.EntityMapDB')),
                ('db_plot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runners', to='rplogger.PlotDB')),
                ('db_tags', models.ManyToManyField(help_text='tags on this object. Tags are simple string markers to identify, group and alias actors.', to='typeclasses.Tag')),
            ],
            options={
                'verbose_name': 'PlotRunner',
                'verbose_name_plural': ' PlotRunners',
                'unique_together': {('db_plot', 'db_entity')},
            },
        ),
    ]
